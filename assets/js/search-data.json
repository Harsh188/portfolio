{
  
    
        "post0": {
            "title": "Transformers",
            "content": "About . In this notebook I&#39;ll be constructing the Transformers architecture from scratch using the PyTorch module. . The Transformer (Vaswani et al) was originally proposed in 2018 by a group of Google researchers. Their paper titled &quot;Attention is all you need&quot; tackled sequence modeling problems by adopting the attention mechanism to draw global dependencies between input and output. The Transformer architecture was the first of its kind to be entirely dependent on the self-attention module while disposing the notion of RNNs and convolution. . Image credits: Vaswani et al . Image credits: Vaswani et al . Import Libraries . import torch.nn as nn import torch import torch.nn.functional as F import math,copy,re import warnings import pandas as pd import numpy as np import seaborn as sns # import torchtext import matplotlib.pyplot as plt print(torch.__version__) . 1.13.0+cu117 .",
            "url": "https://harshithmohankumar.com/jupyter/2023/03/07/Transformers.html",
            "relUrl": "/jupyter/2023/03/07/Transformers.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "PyTorch Workflow Fundamentals",
            "content": "About . This notebook covers the 01. PyTorch Workflow Fundamentals using the Zero to Mastery Learn PyTorch for Deep Learning guide. Resource Link: https://www.learnpytorch.io/01_pytorch_workflow/ . The basic workflow for deep learning is: . Getting data ready | Building a model | Fitting the model to data (training) | Making predictions and evaluating a model (inference) | Saving and loading a model | Putting it all together | Basic Imports . import torch import torch.nn as nn import matplotlib.pyplot as plt # Check PyTorch version torch.__version__ . /usr/local/lib/python3.8/dist-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html from .autonotebook import tqdm as notebook_tqdm . &#39;1.13.0+cu117&#39; . Data (preparing and loading) . Our inputs could be anyting (images, audio, text, etc) however what the model trains on is a series of tensors. There are several ways to convert these various inputs into a numerical format but for the simplicity of this exercise, I&#39;ll only be using tensors as inputs. . For this first part, I&#39;ll be using linear regression to create data using known parameters and then trying to replicate these parameters using a model in PyTorch. . weight = 0.7 bias = 0.3 # Create data start = 0 end = 10 step = 0.2 X = torch.arange(start,end,step).unsqueeze(dim=1) y = weight * X + bias X[:10], y[:10] . (tensor([[0.0000], [0.2000], [0.4000], [0.6000], [0.8000], [1.0000], [1.2000], [1.4000], [1.6000], [1.8000]]), tensor([[0.3000], [0.4400], [0.5800], [0.7200], [0.8600], [1.0000], [1.1400], [1.2800], [1.4200], [1.5600]])) . So we have created our features (X) and labels (y). Now lets split our data into training and test sets to train a model. . Split data into train and test sets . train_split = int(0.8 * len(X)) # Get size 80% of total data X_train, y_train = X[:train_split], y[:train_split] X_test, y_test = X[train_split:], y[train_split:] len(X_train), len(y_train), len(X_test), len(y_test) . (40, 40, 10, 10) . Lets plot our train and test set. . def plot_predictions(train_data=X_train, train_labels=y_train, test_data=X_test, test_labels=y_test, predictions=None): &quot;&quot;&quot; Plots training data, test data and compares predictions. &quot;&quot;&quot; plt.figure(figsize=(10,7)) # Plot training data in blue plt.scatter(train_data, train_labels, c=&quot;b&quot;, s=4, label=&quot;Training data&quot;) # Plot test data in green plt.scatter(test_data, test_labels, c=&quot;g&quot;, s=4, label=&quot;Test data&quot;) if predictions is not None: # Plot Predictions in red plt.scatter(test_data, predictions, c=&quot;r&quot;, label=&quot;Predictions&quot;) # Show legend plt.legend(prop={&quot;size&quot;:14}) . plot_predictions() . Lets now move on to building our model. . Build Model . For our model we will be building a Simple Linear Regression model using PyTorch. . class LinearRegressionModel(nn.Module): def __init__(self): super().__init__() self.weights = nn.Parameter(torch.rand(1, requires_grad=True, dtype=torch.float)) self.bias = nn.Parameter(torch.rand(1, requires_grad=True, dtype=torch.float)) def forward(self, x: torch.Tensor) -&gt; torch.Tensor: return self.weights * x + self.bias . The torch.nn module contains all of the building blocks for computational graphs. . | The torch.nn.Parameter Stores stensors that can be used with nn.Module. If require_grad=True gradients are calcualted automoatically. . | The torch.nn.Module is the base class for all neural network modules. All building blocks for neural networks are subclasses. . | The torch.optim contains various optimizers. These algorithms decide how to best change the parameters to imporve gradient descent and in turn reduce loss. . | Checking our model . We can check the parameters of our model using .parameters(). . model = LinearRegressionModel() # Check the nn.Parameter(s) within the nn.Module subclass list(model.parameters()) . [Parameter containing: tensor([0.9108], requires_grad=True), Parameter containing: tensor([0.3234], requires_grad=True)] . We can also get the state of the model using .state_dict(). This returns a dictionary containing refrences to the whole state of the module. . model.state_dict() . OrderedDict([(&#39;weights&#39;, tensor([0.9108])), (&#39;bias&#39;, tensor([0.3234]))]) . Making Predictions . We can pass in the X_test data and see how it predicts y_test. When we pass data into the instance of the model, it executes the model&#39;s forward() method to produce a result. . with torch.inference_mode(): y_preds = model(X_test) . torch.inference_mode() turns off a bunch of things (like gradient tracking, which is necessary for training but not for inference) to make forward-passes (data going through the forward() method) faster . print(f&quot;Number of testing samples: {len(X_test)}&quot;) print(f&quot;Number of predictions made: {len(y_preds)}&quot;) print(f&quot;Predicted values: {y_preds}&quot;) . Number of testing samples: 10 Number of predictions made: 10 Predicted values: tensor([[7.6097], [7.7918], [7.9740], [8.1561], [8.3383], [8.5204], [8.7026], [8.8848], [9.0669], [9.2491]]) . plot_predictions(predictions=y_preds) . y_test - y_preds . tensor([[-1.7097], [-1.7518], [-1.7940], [-1.8361], [-1.8783], [-1.9204], [-1.9626], [-2.0048], [-2.0469], [-2.0891]]) . We can clearly see that our model predictions are terrible. This is because the model hasn&#39;t learned the parameters. . Train Model . Loss &amp; Optimizer . The Loss function measures how wrong your models predictions are compared to the truth labels. | The Optimizer tells your model how to update its internal parameters to best lower the loss. | loss_fn = nn.L1Loss() # MAE loss is the same as L1Loss # Create the optimizer optimizer = torch.optim.SGD(params=model.parameters(), lr=0.01) . PyTorch training loop . Forward pass | Calculate the loss | Zero gradients | Perform backpropagation on the loss | Update the optimizer (gradient descent) | PyTorch testing loop . Forward pass | Calculate the loss | Calculate evaluation metrics (optional) | epochs = 100 # Create empty loss lists to track values train_loss_values = [] test_loss_values = [] epoch_count = [] for epoch in range(epochs): ### Training loop # Put the model in training mode model.train() # Step 1: Forward pass on train data using the foward method y_pred = model(X_train) # Step 2: Calculate the loss (prediction, test) loss = loss_fn(y_pred, y_train) # Step 3: Zero grad of the optimizer optimizer.zero_grad() # Step 4: Perform back prop loss.backward() # Step 5: Update optimizer optimizer.step() ### Testing # Put the model in evaluation mode model.eval() with torch.inference_mode(): # Step 1: Perform forward pass on test data test_pred = model(X_test) # Step 2: Calculate loss on test data test_loss = loss_fn(test_pred, y_test.type(torch.float)) # Step 3: Calculate and print evaluation metrics if epoch % 10 == 0: epoch_count.append(epoch) train_loss_values.append(loss.detach().numpy()) test_loss_values.append(test_loss.detach().numpy()) print(f&quot;Epoch: {epoch} | MAE Train Loss: {loss} | MAE Test Loss: {test_loss}&quot;) . Epoch: 0 | MAE Train Loss: 0.8454433679580688 | MAE Test Loss: 1.5422637462615967 Epoch: 10 | MAE Train Loss: 0.09509645402431488 | MAE Test Loss: 0.17292337119579315 Epoch: 20 | MAE Train Loss: 0.07968692481517792 | MAE Test Loss: 0.19783243536949158 Epoch: 30 | MAE Train Loss: 0.07451756298542023 | MAE Test Loss: 0.20450147986412048 Epoch: 40 | MAE Train Loss: 0.07201753556728363 | MAE Test Loss: 0.20700129866600037 Epoch: 50 | MAE Train Loss: 0.07051753997802734 | MAE Test Loss: 0.2085011899471283 Epoch: 60 | MAE Train Loss: 0.07051753997802734 | MAE Test Loss: 0.2085011899471283 Epoch: 70 | MAE Train Loss: 0.07051753997802734 | MAE Test Loss: 0.2085011899471283 Epoch: 80 | MAE Train Loss: 0.07051753997802734 | MAE Test Loss: 0.2085011899471283 Epoch: 90 | MAE Train Loss: 0.07051753997802734 | MAE Test Loss: 0.2085011899471283 . plt.plot(epoch_count, train_loss_values, label=&quot;Train Loss&quot;) plt.plot(epoch_count, test_loss_values, label=&quot;Test Loss&quot;) plt.title(&quot;Training and test loss curves&quot;) plt.ylabel(&quot;Loss&quot;) plt.xlabel(&quot;Epoch&quot;) plt.legend(); . # Check the nn.Parameter(s) within the nn.Module subclass list(model.parameters()) # List named parameters model.state_dict() . OrderedDict([(&#39;weights&#39;, tensor([0.6844])), (&#39;bias&#39;, tensor([0.2904]))]) . Making Predictions . Now that we have a trained model we want to use it to make infrences. . There are three important things to consider when making predictions with a PyTorch model: . Set the model in evaulation mode (model.eval()) | Makde predictions using the inference mode context manager (with torch.inference_mode(): ...) | All predictions should be made on the same deveice | model.eval() # 2. Setup inference mode with torch.inference_mode() .",
            "url": "https://harshithmohankumar.com/jupyter/2022/12/02/PyTorch-Workflow.html",
            "relUrl": "/jupyter/2022/12/02/PyTorch-Workflow.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "PyTorch Fundamentals",
            "content": "About . This notebook covers the PyTorch Fundamentals using the Zero to Mastery Learn PyTorch for Deep Learning guide. Resource Link: https://www.learnpytorch.io/00_pytorch_fundamentals/ . !nvidia-smi . Thu Dec 1 12:24:52 2022 +--+ | NVIDIA-SMI 520.61.05 Driver Version: 520.61.05 CUDA Version: 11.8 | |-+-+-+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... On | 00000000:2B:00.0 On | N/A | | 30% 53C P8 30W / 320W | 575MiB / 10240MiB | 17% Default | | | | N/A | +-+-+-+ +--+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| +--+ . Topics to Cover . Introduction to tensors | Creating tensors | Getting information from tensors | Manipulating tensors | Indexing on tensors | Mixing PyTorch tensors and NumPy | PyTorch on GPU | Importing PyTorch . import torch import pandas as pd import numpy as np import matplotlib.pyplot as plt print(torch.__version__) . /usr/local/lib/python3.8/dist-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html from .autonotebook import tqdm as notebook_tqdm . 1.13.0+cu117 . Introduction to Tensors . A Tensor is an algebraic object that describes multilinear relationship between sets of algebraic objects related to a vector space. . Creating Tensors . A torch.Tensor is a multi-dimensional matrix containing elements of a single data type. There are various data types which can be defined. There are also CPU and GPU tensors. . Scalar . scalar = torch.tensor(7) scalar . tensor(7) . scalar.ndim . 0 . scalar.item() . 7 . Vectors . vector = torch.tensor([1,2]) vector . tensor([1, 2]) . vector.ndim . 1 . vector.shape . torch.Size([2]) . Matrix . matrix = torch.tensor([[1,2], [3,4]]) matrix . tensor([[1, 2], [3, 4]]) . matrix.ndim . 2 . matrix.shape . torch.Size([2, 2]) . Tensors . tensor = torch.tensor([[[1,2,3], [4,5,6], [7,8,9]]]) tensor . tensor([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]) . tensor.ndim . 3 . tensor.shape . torch.Size([1, 3, 3]) . The following image visually depicts the difference between scalars, vectors, matrix and tensors. . Random Tensors . A machine learning model often starts out with large random tensors and adjusts these random numbers as it works through the data to represent it in a better way. To do this in PyTorch we can use the torch.rand method. . random_tensor = torch.rand(size=(3,4)) random_tensor, random_tensor.dtype . (tensor([[0.3864, 0.4220, 0.3463, 0.1763], [0.3355, 0.9340, 0.2307, 0.6128], [0.0757, 0.9835, 0.4912, 0.1533]]), torch.float32) . random_image_size_tensor = torch.rand(size=(224,224,3)) random_image_size_tensor.shape, random_image_size_tensor.ndim . (torch.Size([224, 224, 3]), 3) . Zeros and Ones . Sometimes we just want to fill tensors with zeros or ones. We can do this using the torch.zeros() or torch.ones() method. . zeros_tensor = torch.zeros(size=(3,4)) zeros_tensor, zeros_tensor.dtype . (tensor([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]]), torch.float32) . ones_tensor = torch.ones(size=(3,4)) ones_tensor, ones_tensor.dtype . (tensor([[1., 1., 1., 1.], [1., 1., 1., 1.], [1., 1., 1., 1.]]), torch.float32) . Creating a range and tensors like . To create a range of numbers we can use torch.arange(start, end, step). . zero_to_ten = torch.arange(start=0,end=10,step=1) zero_to_ten . tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . To mimic a shape of another tensor we can use torch.rand_like(input), torch.zeros_like(input) or torch.ones_like(input). . rand_zeros_tensor_like = torch.rand_like(zeros_tensor) rand_zeros_tensor_like, rand_zeros_tensor_like.dtype . (tensor([[0.6870, 0.7167, 0.6738, 0.9651], [0.1833, 0.4796, 0.7711, 0.6932], [0.2788, 0.0643, 0.0418, 0.5420]]), torch.float32) . Getting Information from Tensors . The most common attributes of tensors are shape, dtype and device. . some_tensor = torch.rand(size=(3,4)) # Display details of tensor print(some_tensor) print(f&quot;Shape of tensor: {some_tensor.shape}&quot;) print(f&quot;Datatype of tensor: {some_tensor.dtype}&quot;) print(f&quot;Device tensor is stored on: {some_tensor.device}&quot;) . tensor([[0.0452, 0.0207, 0.7986, 0.6861], [0.4294, 0.7774, 0.5604, 0.4319], [0.1340, 0.9240, 0.3545, 0.6204]]) Shape of tensor: torch.Size([3, 4]) Datatype of tensor: torch.float32 Device tensor is stored on: cpu . Manipulating Tensors (operations) . One of the most important tensor operations in deep learning is matrix multiplication. . tensor = torch.tensor([1,2,3]) tensor.shape . torch.Size([3]) . tensor * tensor . tensor([1, 4, 9]) . torch.matmul(tensor, tensor) . tensor(14) . Indexing . How do we access specific data from tensors? . some_tensor = torch.arange(start=1, end=10).reshape(1, 3, 3) some_tensor, some_tensor.shape . (tensor([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]), torch.Size([1, 3, 3])) . print(f&quot;First square bracket: {some_tensor[0]}&quot;) print(f&quot;Second square bracket: {some_tensor[0][0]}&quot;) print(f&quot;Third square bracket: {some_tensor[0][0][0]}&quot;) . First square bracket: tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Second square bracket: tensor([1, 2, 3]) Third square bracket: 1 . print(f&quot;First row of tensor: {some_tensor[:,0]}&quot;) . First row of tensor: tensor([[1, 2, 3]]) . print(f&quot;Second column of tensor: {some_tensor[:,:,1]}&quot;) . Second column of tensor: tensor([[2, 5, 8]]) . print(f&quot;Selecting bottom right 2x2 grid: {some_tensor[:,1:,1:]}&quot;) . Selecting bottom right 2x2 grid: tensor([[[5, 6], [8, 9]]]) . PyTorch and NumPy . PyTorch has built in functionality to convert NumPy arrays into PyTorch tensors. This is done using the torch.from_numpy(ndarray) method. To convert a Tensor to an array we can use torch.Tensor.numpy(). . array = np.random.rand(3,3) array, torch.from_numpy(array) . (array([[0.52877635, 0.51487637, 0.28748219], [0.03840897, 0.40011216, 0.7600652 ], [0.65834844, 0.06947759, 0.87114052]]), tensor([[0.5288, 0.5149, 0.2875], [0.0384, 0.4001, 0.7601], [0.6583, 0.0695, 0.8711]], dtype=torch.float64)) . some_tensor = torch.rand(size=(3,3)) some_tensor, some_tensor.numpy() . (tensor([[0.1617, 0.9384, 0.5670], [0.3329, 0.2371, 0.1353], [0.7492, 0.9597, 0.1461]]), array([[0.1617378 , 0.9383805 , 0.5670012 ], [0.3328787 , 0.23712236, 0.13531995], [0.7492051 , 0.9597247 , 0.14605427]], dtype=float32)) . PyTorch on GPU . torch.cuda.is_available() . True . device = &quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot; device . &#39;cuda&#39; . torch.cuda.device_count() . 1 . PyTorch maintains a seperation of where tensors are stored. If we are using GPUs for training then we have to put the tensors on the gpu device. This allows us to run faster numerical computation than using a CPU. . some_tensor = torch.ones(size=(3,3)) # Move the tensor to GPU tensor_on_gpu = tensor.to(device) # Check where the tensor exists print(tensor, tensor.device) # Check where the tensor exists print(tensor_on_gpu, tensor_on_gpu.device) . tensor([1, 2, 3]) cpu tensor([1, 2, 3], device=&#39;cuda:0&#39;) cuda:0 . To move the tensor back to CPU we can use torch.to(&#39;cpu&#39;). This is needed if we want to convert our tensor into a numpy array. . Exercises . Create a random tensor with shape (7, 7). | torch.rand(size=(7,7)) . tensor([[0.2939, 0.0436, 0.6219, 0.6090, 0.0334, 0.9435, 0.1173], [0.0818, 0.6880, 0.7191, 0.8980, 0.3537, 0.1512, 0.4098], [0.9492, 0.9181, 0.6112, 0.0101, 0.9554, 0.4541, 0.3899], [0.2519, 0.8227, 0.8853, 0.8640, 0.9598, 0.2262, 0.0393], [0.4030, 0.5945, 0.6027, 0.6424, 0.8491, 0.8344, 0.0452], [0.2884, 0.2951, 0.8422, 0.9204, 0.8882, 0.1274, 0.8725], [0.1320, 0.8361, 0.7701, 0.8724, 0.7167, 0.5192, 0.1237]]) . Perform a matrix multiplication on the tensor from the previous problem with another random tensor with shape (1, 7) (hint: you may have to transpose the second tensor). | tensor_1 = torch.rand(size=(7,7)) tensor_2 = torch.rand(size=(1,7)) print(tensor_1.shape, tensor_2.shape) torch.matmul(tensor_1, tensor_2.T) . torch.Size([7, 7]) torch.Size([1, 7]) . tensor([[2.2379], [2.9939], [3.8932], [3.3609], [2.9280], [2.7368], [1.4672]]) .",
            "url": "https://harshithmohankumar.com/jupyter/2022/11/28/PyTorch-fundamentals.html",
            "relUrl": "/jupyter/2022/11/28/PyTorch-fundamentals.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://harshithmohankumar.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://harshithmohankumar.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m an aspring Machine Learning (ML) Engineer who is enthusiastic to build the next generation tools required to bridge the gap between research and the implementation. Specifically, I’m interested in developing end-to-end pipelines to effectively utilize the state-of-the-art ML models to satisfy customer requirements. . The areas which I’m currently researching are graph neural networks, semi-supervision, data analytics, and computer vision. I enjoy implementing research ideas and communicating my experience through articles and videos. . I’m a 4th year student at PES University studying Computer Science and Engineering with a specialization in Machine Intelligence and Data Science. I’ve had a long history of community contributions ranging from my research publications, Google Summer of Code, and various clubs. For more details on my work experience, check out my LinkedIn profile. . My Badges . . Contact Me . | | | | | .",
          "url": "https://harshithmohankumar.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Authoring",
          "content": "Below are the blogs, articles, and tutorials I have written on Data Science, Machine Learning, and more. I am fortunate enough to collaborate with amazing folks from all around the globe. . Google Summer of Code 2022 - Red Hen Lab . GSoC Red Hen Lab — Community Bonding Period | . 100 Days of ML Challenge . 50/100 Days of ML Challenge — Halfway Evaluation | 100/100 Days of ML Challenge | YouTube Playlist | . Others . Coding my personal website series | All about applying to internships | .",
          "url": "https://harshithmohankumar.com/authoring/",
          "relUrl": "/authoring/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://harshithmohankumar.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}